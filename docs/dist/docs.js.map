{"version":3,"sources":["docs/src/js/docs.js","src/js/config.js","src/js/utils/css.js","src/js/utils/is.js","src/js/utils/numbers.js","src/js/rangetouch.js","src/js/utils/events.js"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","defaults","addCSS","thumbWidth","watch","matches","element","selector","Array","from","document","querySelectorAll","includes","this","call","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","isString","String","isArray","isNodeList","NodeList","is","Element","Event","keys","round","number","step","places","value","match","concat","Math","max","getDecimalPlaces","parseFloat","toFixed","RangeTouch","a","options","instance","Constructor","TypeError","_classCallCheck","querySelector","rangeTouch","config","assign","init","staticProps","arguments","targets","filter","observer","MutationObserver","mutations","forEach","mutation","addedNodes","node","observe","body","childList","subtree","map","t","get","documentElement","protoProps","enabled","style","userSelect","webKitUserSelect","touchAction","listeners","toggle","b","method","type","event","set","userCapture","passive","percent","touch","changedTouches","min","getAttribute","clientRect","getBoundingClientRect","width","clientX","left","disabled","preventDefault","bubbles","dispatchEvent","trigger","prototype","loadSprite","url","xhr","XMLHttpRequest","open","onload","container","createElement","setAttribute","innerHTML","responseText","insertBefore","childNodes","send","addEventListener","window","shr","setup","count","classname"],"mappings":"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","file":"docs.js","sourcesContent":["// ==========================================================================\n// Docs example\n// ==========================================================================\n\nimport RangeTouch from '../../../src/js/rangetouch';\n\nconst loadSprite = url => {\n    const xhr = new XMLHttpRequest();\n    const { body } = document;\n\n    // Check for CORS support\n    // If you're loading from same domain, you can remove the whole if/else statement\n    // XHR for Chrome/Firefox/Opera/Safari/IE10+\n    if (!('withCredentials' in xhr)) {\n        return;\n    }\n\n    xhr.open('GET', url, true);\n\n    // Inject hidden div with sprite on load\n    xhr.onload = () => {\n        const container = document.createElement('div');\n        container.setAttribute('hidden', '');\n        container.innerHTML = xhr.responseText;\n        body.insertBefore(container, body.childNodes[0]);\n    };\n\n    xhr.send();\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Load the sprite\n    ['dist/docs.svg'].forEach(loadSprite);\n\n    // Setup shr\n    window.shr.setup({\n        count: {\n            classname: 'btn__count',\n        },\n    });\n\n    // Set range thumb size\n    RangeTouch.setup('.js-example', { thumbWidth: 20 });\n});\n","const defaults = {\n    addCSS: true, // Add CSS to the element to improve usability (required here or in your CSS!)\n    thumbWidth: 15, // The width of the thumb handle\n    watch: true, // Watch for new elements that match a string target\n};\n\nexport default defaults;","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return matches.call(element, selector);\n}\n\nexport default {};\n","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","// Get the number of decimal places\nexport function getDecimalPlaces(value) {\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n    if (!match) {\n        return 0;\n    }\n\n    return Math.max(\n        0,\n        // Number of digits right of decimal point.\n        (match[1] ? match[1].length : 0) -\n            // Adjust for scientific notation.\n            (match[2] ? +match[2] : 0),\n    );\n}\n\n// Round to the nearest step\nexport function round(number, step) {\n    if (step < 1) {\n        const places = getDecimalPlaces(step);\n        return parseFloat(number.toFixed(places));\n    }\n    return Math.round(number / step) * step;\n}\n\nexport default {};\n","// ==========================================================================\n// rangetouch.js v2.0.0\n// Making <input type=\"range\"> work on touch devices\n// https://github.com/sampotts/rangetouch\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './config';\nimport { matches } from './utils/css';\nimport { trigger } from './utils/events';\nimport is from './utils/is';\nimport { round } from './utils/numbers';\n\nclass RangeTouch {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.element = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.element = document.querySelector(target);\n        }\n\n        if (!is.element(this.element) || !is.empty(this.element.rangeTouch)) {\n            return;\n        }\n\n        this.config = Object.assign({}, defaults, options);\n\n        this.init();\n    }\n\n    static get enabled() {\n        return 'ontouchstart' in document.documentElement;\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.empty(target) || is.string(target)) {\n            targets = Array.from(document.querySelectorAll(is.string(target) ? target : 'input[type=\"range\"]'));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = Object.assign({}, defaults, options);\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const range = new RangeTouch(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new RangeTouch(t, options));\n    }\n\n    init() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        // Add useful CSS\n        if (this.config.addCSS) {\n            // TODO: Restore original values on destroy\n            this.element.style.userSelect = 'none';\n            this.element.style.webKitUserSelect = 'none';\n            this.element.style.touchAction = 'manipulation';\n        }\n\n        this.listeners(true);\n\n        this.element.rangeTouch = this;\n    }\n\n    destroy() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        this.listeners(false);\n\n        this.element.rangeTouch = null;\n    }\n\n    listeners(toggle) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        // Listen for events\n        ['touchstart', 'touchmove', 'touchend'].forEach(type => {\n            this.element[method](type, event => this.set(event), {userCapture: false, passive: true});\n        });\n    }\n\n    /**\n     * Get the value based on touch position\n     * @param {Event} event\n     */\n    get(event) {\n        if (!RangeTouch.enabled || !is.event(event)) {\n            return null;\n        }\n\n        const input = event.target;\n        const touch = event.changedTouches[0];\n        const min = parseFloat(input.getAttribute('min')) || 0;\n        const max = parseFloat(input.getAttribute('max')) || 100;\n        const step = parseFloat(input.getAttribute('step')) || 1;\n        const delta = max - min;\n\n        // Calculate percentage\n        let percent;\n        const clientRect = input.getBoundingClientRect();\n        const thumbWidth = ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\n\n        // Determine left percentage\n        percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\n\n        // Don't allow outside bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Factor in the thumb offset\n        if (percent < 50) {\n            percent -= (100 - percent * 2) * thumbWidth;\n        } else if (percent > 50) {\n            percent += (percent - 50) * 2 * thumbWidth;\n        }\n\n        // Find the closest step to the mouse position\n        return min + round(delta * (percent / 100), step);\n    }\n\n    /**\n     * Update range value based on position\n     * @param {Event} event\n     */\n    set(event) {\n        if (!RangeTouch.enabled || !is.event(event) || event.target.disabled) {\n            return;\n        }\n\n        // Prevent text highlight on iOS\n        event.preventDefault();\n\n        // Set value\n        event.target.value = this.get(event);\n\n        // Trigger event\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\n    }\n}\n\nexport default RangeTouch;\n","// Trigger event\nexport function trigger(element, type) {\n    if (!element || !type) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new Event(type, { bubbles: true });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n\nexport default {};\n"]}