{"version":3,"sources":["src/js/rangetouch.js","src/js/config.js","src/js/utils/css.js","src/js/utils/is.js","src/js/utils/numbers.js","src/js/utils/events.js"],"names":["global","factory","exports","module","define","amd","RangeTouch","this","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","defaults","addCSS","thumbWidth","watch","matches","element","selector","Array","from","document","querySelectorAll","includes","call","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","isString","String","isArray","isNodeList","NodeList","is","Element","Event","keys","round","number","step","places","value","match","concat","Math","max","getDecimalPlaces","parseFloat","toFixed","a","options","instance","Constructor","TypeError","_classCallCheck","querySelector","rangeTouch","config","assign","init","staticProps","arguments","targets","filter","observer","MutationObserver","mutations","forEach","mutation","addedNodes","node","observe","body","childList","subtree","map","t","get","documentElement","protoProps","enabled","style","userSelect","webKitUserSelect","touchAction","listeners","toggle","b","method","type","event","set","userCapture","passive","percent","touch","changedTouches","min","getAttribute","clientRect","getBoundingClientRect","width","clientX","left","disabled","preventDefault","bubbles","dispatchEvent","trigger","prototype"],"mappings":"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","file":"rangetouch.js","sourcesContent":["// ==========================================================================\n// rangetouch.js v2.0.0\n// Making <input type=\"range\"> work on touch devices\n// https://github.com/sampotts/rangetouch\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './config';\nimport { matches } from './utils/css';\nimport { trigger } from './utils/events';\nimport is from './utils/is';\nimport { round } from './utils/numbers';\n\nclass RangeTouch {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.element = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.element = document.querySelector(target);\n        }\n\n        if (!is.element(this.element) || !is.empty(this.element.rangeTouch)) {\n            return;\n        }\n\n        this.config = Object.assign({}, defaults, options);\n\n        this.init();\n    }\n\n    static get enabled() {\n        return 'ontouchstart' in document.documentElement;\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.empty(target) || is.string(target)) {\n            targets = Array.from(document.querySelectorAll(is.string(target) ? target : 'input[type=\"range\"]'));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = Object.assign({}, defaults, options);\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const range = new RangeTouch(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new RangeTouch(t, options));\n    }\n\n    init() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        // Add useful CSS\n        if (this.config.addCSS) {\n            // TODO: Restore original values on destroy\n            this.element.style.userSelect = 'none';\n            this.element.style.webKitUserSelect = 'none';\n            this.element.style.touchAction = 'manipulation';\n        }\n\n        this.listeners(true);\n\n        this.element.rangeTouch = this;\n    }\n\n    destroy() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        this.listeners(false);\n\n        this.element.rangeTouch = null;\n    }\n\n    listeners(toggle) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        // Listen for events\n        ['touchstart', 'touchmove', 'touchend'].forEach(type => {\n            this.element[method](type, event => this.set(event), {userCapture: false, passive: true});\n        });\n    }\n\n    /**\n     * Get the value based on touch position\n     * @param {Event} event\n     */\n    get(event) {\n        if (!RangeTouch.enabled || !is.event(event)) {\n            return null;\n        }\n\n        const input = event.target;\n        const touch = event.changedTouches[0];\n        const min = parseFloat(input.getAttribute('min')) || 0;\n        const max = parseFloat(input.getAttribute('max')) || 100;\n        const step = parseFloat(input.getAttribute('step')) || 1;\n        const delta = max - min;\n\n        // Calculate percentage\n        let percent;\n        const clientRect = input.getBoundingClientRect();\n        const thumbWidth = ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\n\n        // Determine left percentage\n        percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\n\n        // Don't allow outside bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Factor in the thumb offset\n        if (percent < 50) {\n            percent -= (100 - percent * 2) * thumbWidth;\n        } else if (percent > 50) {\n            percent += (percent - 50) * 2 * thumbWidth;\n        }\n\n        // Find the closest step to the mouse position\n        return min + round(delta * (percent / 100), step);\n    }\n\n    /**\n     * Update range value based on position\n     * @param {Event} event\n     */\n    set(event) {\n        if (!RangeTouch.enabled || !is.event(event) || event.target.disabled) {\n            return;\n        }\n\n        // Prevent text highlight on iOS\n        event.preventDefault();\n\n        // Set value\n        event.target.value = this.get(event);\n\n        // Trigger event\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\n    }\n}\n\nexport default RangeTouch;\n","const defaults = {\n    addCSS: true, // Add CSS to the element to improve usability (required here or in your CSS!)\n    thumbWidth: 15, // The width of the thumb handle\n    watch: true, // Watch for new elements that match a string target\n};\n\nexport default defaults;","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return matches.call(element, selector);\n}\n\nexport default {};\n","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","// Get the number of decimal places\nexport function getDecimalPlaces(value) {\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n    if (!match) {\n        return 0;\n    }\n\n    return Math.max(\n        0,\n        // Number of digits right of decimal point.\n        (match[1] ? match[1].length : 0) -\n            // Adjust for scientific notation.\n            (match[2] ? +match[2] : 0),\n    );\n}\n\n// Round to the nearest step\nexport function round(number, step) {\n    if (step < 1) {\n        const places = getDecimalPlaces(step);\n        return parseFloat(number.toFixed(places));\n    }\n    return Math.round(number / step) * step;\n}\n\nexport default {};\n","// Trigger event\nexport function trigger(element, type) {\n    if (!element || !type) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new Event(type, { bubbles: true });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n\nexport default {};\n"]}